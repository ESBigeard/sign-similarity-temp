"""
This script is used to evaluate the performance of the matching using
embeddings from the spoter model. Evaluatin similarity assessments requires
labels for your videos, that is, being able to know which videos are similar
to which. 
This script saves results in a JSON file.

--- 

Requirements:
    - A csv file containing the similarity results, where each column represents a different video
    and its 100 most similar videos. This csv file is generated by the
    `measure_similarity` module.
    - A JSON file containing the video pairs. For mmore precision to generate such file,
    refer to the simcheck/SPOTER/README.md file as well as to the simcheck/README.md file. 

Command to run the script:

    All given paths should be relative to the project root directory.

    python3 -m simcheck.SPOTER.evaluate_similarity -exp <experiment name> -cf <path_to_csv_file> -gold <path_to_json_file>
"""

import json
import argparse
import pandas as pd


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Evaluate similarity matches")
    parser.add_argument('-exp', '--experiment', type=str, required=True, help='Experiment name', default='SPOTER')
    parser.add_argument('-cf', '--csv_file', type=str, required=True, help='Path to the CSV file containing similarity results')
    parser.add_argument('-gold', '--gold_groups', type=str, required=True, help='Path to the JSON file containing video pairs')

    args = parser.parse_args()
    exp, similarities, video_pairs = args.experiment, args.csv_file, args.gold_groups

    df = pd.read_csv(similarities)
    video_pairs = json.load(open(video_pairs, 'r'))

    # Values of K to evaluate
    Ks = [1, 5, 10, 15, 20, 50, 100] 
    results = {}

    for K in Ks:
        print(f"Evaluating for top {K} matches...")
        TP = 0
        for column_og in df.columns:
          
            column = str(column_og)
            correct_matches = []
            videos = df[column_og].tolist()
            videos = [video.replace("_", "") for video in videos]
            videos = [video for video in videos]
            for label, pairs in video_pairs.items():
                pairs = [pair.split('.')[0] for pair in pairs] 
                pairs = [pair.replace("_", "") for pair in pairs]
           
              
                if column in pairs:
                    correct_matches = pairs
                    correct_matches = [match for match in correct_matches if match != column]
            
            for video in videos[:K]:
                
                video = video.split(",")[0].replace("'", "").replace("(", "").replace(")", "")
            
                if video in correct_matches:
                    # print(f"Found match: {video} in column {column_og}")
                    TP += 1
                    break
        
        results[K] = TP / len(df.columns)
    
    print("Evaluation Results:")
    evaluation_dict = {}
    for K, accuracy in results.items():
        print(f"Accuracy for top {K} matches: {accuracy:.2f}")
        evaluation_dict[f"top_{K}"] = accuracy
    
    with open(f'simcheck/SPOTER/results/evaluations/{exp}_evaluation_results.json', 'w') as f:
        json.dump(evaluation_dict, f, indent=4)

    